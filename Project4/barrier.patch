diff -rNu kernel/arch/x86/syscalls/syscall_32.tbl kernel_old/arch/x86/syscalls/syscall_32.tbl
--- kernel/arch/x86/syscalls/syscall_32.tbl	2017-06-17 10:44:31.000000000 -0700
+++ kernel_old/arch/x86/syscalls/syscall_32.tbl	2017-11-28 16:26:39.020041000 -0700
@@ -365,3 +365,6 @@
 356	i386	memfd_create		sys_memfd_create
 357	i386	bpf			sys_bpf
 358	i386	execveat		sys_execveat			stub32_execveat
+359	i386	barrier_init	sys_barrier_init
+360	i386	barrier_wait	sys_barrier_wait
+361	i386	barrier_destroy	sys_barrier_destroy
\ No newline at end of file
diff -rNu kernel/arch/x86/vdso/vdso-image-32-int80.c kernel_old/arch/x86/vdso/vdso-image-32-int80.c
--- kernel/arch/x86/vdso/vdso-image-32-int80.c	1969-12-31 17:00:00.000000000 -0700
+++ kernel_old/arch/x86/vdso/vdso-image-32-int80.c	2017-11-28 20:56:53.817063000 -0700
@@ -0,0 +1,407 @@
+/* AUTOMATICALLY GENERATED -- DO NOT EDIT */
+
+#include <linux/linkage.h>
+#include <asm/page_types.h>
+#include <asm/vdso.h>
+
+static unsigned char raw_data[4096] __page_aligned_data = {
+	0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x80, 0x0B, 0x00, 0x00, 0x34, 0x00, 
+	0x00, 0x00, 0x54, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x34, 0x00, 0x20, 0x00, 0x04, 0x00, 0x28, 0x00, 0x10, 0x00, 
+	0x0F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x0B, 
+	0x00, 0x00, 0xA1, 0x0B, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
+	0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x78, 0x02, 
+	0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 
+	0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x20, 0x05, 0x00, 0x00, 0x20, 0x05, 0x00, 0x00, 0x20, 0x05, 
+	0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
+	0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0xE5, 
+	0x74, 0x64, 0x5C, 0x05, 0x00, 0x00, 0x5C, 0x05, 0x00, 0x00, 
+	0x5C, 0x05, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x24, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
+	0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0xF1, 0xFF, 0x16, 0x00, 
+	0x00, 0x00, 0x80, 0x0B, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
+	0x12, 0x00, 0x0B, 0x00, 0x28, 0x00, 0x00, 0x00, 0xA0, 0x09, 
+	0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 
+	0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x11, 0x00, 0xF1, 0xFF, 0x5B, 0x00, 0x00, 0x00, 
+	0x70, 0x0B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x00, 
+	0x0B, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x06, 0x00, 0x00, 
+	0xC7, 0x02, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 0x48, 0x00, 
+	0x00, 0x00, 0x60, 0x0B, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
+	0x12, 0x00, 0x0B, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x20, 0x0B, 
+	0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 
+	0x00, 0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x63, 0x6C, 
+	0x6F, 0x63, 0x6B, 0x5F, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6D, 
+	0x65, 0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 
+	0x5F, 0x76, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6C, 0x6C, 0x00, 
+	0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x67, 0x65, 0x74, 
+	0x74, 0x69, 0x6D, 0x65, 0x6F, 0x66, 0x64, 0x61, 0x79, 0x00, 
+	0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x74, 0x69, 0x6D, 
+	0x65, 0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 
+	0x5F, 0x73, 0x69, 0x67, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 
+	0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 0x5F, 
+	0x72, 0x74, 0x5F, 0x73, 0x69, 0x67, 0x72, 0x65, 0x74, 0x75, 
+	0x72, 0x6E, 0x00, 0x6C, 0x69, 0x6E, 0x75, 0x78, 0x2D, 0x67, 
+	0x61, 0x74, 0x65, 0x2E, 0x73, 0x6F, 0x2E, 0x31, 0x00, 0x4C, 
+	0x49, 0x4E, 0x55, 0x58, 0x5F, 0x32, 0x2E, 0x36, 0x00, 0x4C, 
+	0x49, 0x4E, 0x55, 0x58, 0x5F, 0x32, 0x2E, 0x35, 0x00, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03, 0x00, 
+	0x03, 0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01, 0x00, 
+	0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x91, 0xF0, 0xCE, 0x0F, 
+	0x14, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x71, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x02, 0x00, 0x01, 0x00, 0xF6, 0x75, 0xAE, 0x03, 0x14, 0x00, 
+	0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x01, 0x00, 0xF5, 0x75, 0xAE, 0x03, 0x14, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 
+	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
+	0x7C, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xEC, 0x00, 
+	0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 
+	0x0B, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xFC, 0xFF, 
+	0xFF, 0x6F, 0x24, 0x02, 0x00, 0x00, 0xFD, 0xFF, 0xFF, 0x6F, 
+	0x03, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x6F, 0x12, 0x02, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x78, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x47, 0x4E, 0x55, 0x00, 0x91, 0x08, 
+	0x3D, 0xE5, 0xDC, 0xD9, 0x4E, 0xAB, 0x60, 0xD0, 0x4F, 0xBF, 
+	0x28, 0x4D, 0xBA, 0x48, 0x46, 0xAC, 0x28, 0xF0, 0x06, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x4C, 0x69, 0x6E, 0x75, 0x78, 0x00, 0x00, 0x00, 0x08, 0x13, 
+	0x03, 0x00, 0x01, 0x1B, 0x03, 0x3B, 0x20, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x03, 0x06, 0x00, 0x00, 0x38, 0x00, 
+	0x00, 0x00, 0x13, 0x06, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x00, 
+	0x24, 0x06, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x10, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x53, 
+	0x00, 0x01, 0x7C, 0x08, 0x01, 0x1B, 0x00, 0x00, 0x68, 0x00, 
+	0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xC3, 0x05, 0x00, 0x00, 
+	0x09, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x74, 0x20, 0x06, 
+	0x10, 0x00, 0x02, 0x74, 0x30, 0x10, 0x01, 0x02, 0x74, 0x2C, 
+	0x10, 0x02, 0x02, 0x74, 0x28, 0x10, 0x03, 0x02, 0x74, 0x24, 
+	0x10, 0x05, 0x02, 0x74, 0x1C, 0x10, 0x06, 0x02, 0x74, 0x18, 
+	0x10, 0x07, 0x02, 0x74, 0x14, 0x10, 0x08, 0x02, 0x74, 0x3C, 
+	0x42, 0x0F, 0x03, 0x74, 0x1C, 0x06, 0x10, 0x00, 0x02, 0x74, 
+	0x2C, 0x10, 0x01, 0x02, 0x74, 0x28, 0x10, 0x02, 0x02, 0x74, 
+	0x24, 0x10, 0x03, 0x02, 0x74, 0x20, 0x10, 0x05, 0x02, 0x74, 
+	0x18, 0x10, 0x06, 0x02, 0x74, 0x14, 0x10, 0x07, 0x02, 0x74, 
+	0x10, 0x10, 0x08, 0x02, 0x74, 0x38, 0x44, 0x00, 0x00, 0x00, 
+	0x84, 0x00, 0x00, 0x00, 0x67, 0x05, 0x00, 0x00, 0x08, 0x00, 
+	0x00, 0x00, 0x00, 0x0F, 0x04, 0x74, 0xBC, 0x01, 0x06, 0x10, 
+	0x00, 0x03, 0x74, 0xCC, 0x01, 0x10, 0x01, 0x03, 0x74, 0xC8, 
+	0x01, 0x10, 0x02, 0x03, 0x74, 0xC4, 0x01, 0x10, 0x03, 0x03, 
+	0x74, 0xC0, 0x01, 0x10, 0x05, 0x03, 0x74, 0xB8, 0x01, 0x10, 
+	0x06, 0x03, 0x74, 0xB4, 0x01, 0x10, 0x07, 0x03, 0x74, 0xB0, 
+	0x01, 0x10, 0x08, 0x03, 0x74, 0xD8, 0x01, 0x00, 0x14, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x00, 
+	0x01, 0x7C, 0x08, 0x01, 0x1B, 0x0C, 0x04, 0x04, 0x88, 0x01, 
+	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 
+	0x18, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x55, 0x89, 0xE5, 0x56, 0x53, 0xE8, 
+	0xB9, 0x04, 0x00, 0x00, 0x81, 0xC3, 0x82, 0xFC, 0xFF, 0xFF, 
+	0x51, 0x8D, 0x76, 0x00, 0x8D, 0x76, 0x00, 0x0F, 0x31, 0x8B, 
+	0x8B, 0x80, 0xDD, 0xFF, 0xFF, 0x8B, 0xB3, 0x7C, 0xDD, 0xFF, 
+	0xFF, 0x39, 0xCA, 0x77, 0x07, 0x73, 0x0D, 0x89, 0xF0, 0x89, 
+	0xCA, 0x90, 0x59, 0x5B, 0x5E, 0x5D, 0xC3, 0x8D, 0x76, 0x00, 
+	0x39, 0xF0, 0x72, 0xEF, 0x59, 0x5B, 0x5E, 0x5D, 0xC3, 0xEB, 
+	0x0D, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
+	0x90, 0x90, 0x90, 0x90, 0x55, 0x89, 0xE5, 0x57, 0x56, 0x53, 
+	0x8D, 0x35, 0x74, 0xDD, 0xFF, 0xFF, 0xE8, 0x62, 0x04, 0x00, 
+	0x00, 0x81, 0xC3, 0x2B, 0xFC, 0xFF, 0xFF, 0x83, 0xEC, 0x10, 
+	0x83, 0x7D, 0x08, 0x01, 0x8B, 0x7D, 0x0C, 0x0F, 0x84, 0x81, 
+	0x00, 0x00, 0x00, 0x0F, 0x8E, 0x43, 0x01, 0x00, 0x00, 0x83, 
+	0x7D, 0x08, 0x05, 0x74, 0x45, 0x83, 0x7D, 0x08, 0x06, 0x0F, 
+	0x85, 0x13, 0x01, 0x00, 0x00, 0x8B, 0x83, 0x74, 0xDD, 0xFF, 
+	0xFF, 0xA8, 0x01, 0x0F, 0x85, 0x65, 0x02, 0x00, 0x00, 0x8B, 
+	0x54, 0x1E, 0x40, 0x89, 0x17, 0x8B, 0x54, 0x1E, 0x44, 0x89, 
+	0x57, 0x04, 0x39, 0x83, 0x74, 0xDD, 0xFF, 0xFF, 0x75, 0xDD, 
+	0x83, 0xC4, 0x10, 0x31, 0xC0, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 
+	0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x90, 0x8D, 0xB6, 
+	0x00, 0x00, 0x00, 0x00, 0x8B, 0x83, 0x74, 0xDD, 0xFF, 0xFF, 
+	0xA8, 0x01, 0x75, 0xEE, 0x8B, 0x54, 0x1E, 0x38, 0x89, 0x17, 
+	0x8B, 0x54, 0x1E, 0x3C, 0x89, 0x57, 0x04, 0x3B, 0x83, 0x74, 
+	0xDD, 0xFF, 0xFF, 0x74, 0xC9, 0xEB, 0xDF, 0x8D, 0xB4, 0x26, 
+	0x00, 0x00, 0x00, 0x00, 0xF3, 0x90, 0x8D, 0xB6, 0x00, 0x00, 
+	0x00, 0x00, 0x8B, 0xBB, 0x74, 0xDD, 0xFF, 0xFF, 0xF7, 0xC7, 
+	0x01, 0x00, 0x00, 0x00, 0x75, 0xEA, 0x8B, 0x44, 0x1E, 0x04, 
+	0x8B, 0x55, 0x0C, 0x89, 0x45, 0xF0, 0x8B, 0x44, 0x1E, 0x2C, 
+	0x89, 0x02, 0x8B, 0x4C, 0x1E, 0x04, 0x8B, 0x44, 0x1E, 0x30, 
+	0x8B, 0x54, 0x1E, 0x34, 0x83, 0xF9, 0x01, 0x89, 0x45, 0xE8, 
+	0x89, 0x55, 0xEC, 0x0F, 0x84, 0x7F, 0x01, 0x00, 0x00, 0x31, 
+	0xC0, 0x31, 0xD2, 0x83, 0xF9, 0x02, 0x0F, 0x84, 0xB2, 0x01, 
+	0x00, 0x00, 0x8B, 0x4C, 0x1E, 0x1C, 0x3B, 0xBB, 0x74, 0xDD, 
+	0xFF, 0xFF, 0x75, 0xAE, 0x03, 0x45, 0xE8, 0x8B, 0x7D, 0x0C, 
+	0x13, 0x55, 0xEC, 0x0F, 0xAD, 0xD0, 0xD3, 0xEA, 0xF6, 0xC1, 
+	0x20, 0x74, 0x04, 0x89, 0xD0, 0x31, 0xD2, 0x83, 0xFA, 0x00, 
+	0x77, 0x09, 0x31, 0xC9, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x76, 
+	0x20, 0x31, 0xC9, 0x8D, 0xB4, 0x26, 0x00, 0x00, 0x00, 0x00, 
+	0x05, 0x00, 0x36, 0x65, 0xC4, 0x83, 0xD2, 0xFF, 0x83, 0xC1, 
+	0x01, 0x83, 0xFA, 0x00, 0x77, 0xF0, 0x3D, 0xFF, 0xC9, 0x9A, 
+	0x3B, 0x77, 0xE9, 0x89, 0x47, 0x04, 0x8B, 0x45, 0xF0, 0x01, 
+	0x0F, 0x85, 0xC0, 0x0F, 0x85, 0x11, 0xFF, 0xFF, 0xFF, 0x90, 
+	0x89, 0xF9, 0xB8, 0x09, 0x01, 0x00, 0x00, 0x89, 0xDA, 0x8B, 
+	0x5D, 0x08, 0xE8, 0x4F, 0x03, 0x00, 0x00, 0x89, 0xD3, 0x83, 
+	0xC4, 0x10, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x90, 0x8D, 0x74, 
+	0x26, 0x00, 0x8B, 0x55, 0x08, 0x85, 0xD2, 0x75, 0xD9, 0x89, 
+	0x7D, 0x0C, 0x8B, 0xBB, 0x74, 0xDD, 0xFF, 0xFF, 0xF7, 0xC7, 
+	0x01, 0x00, 0x00, 0x00, 0x0F, 0x85, 0x34, 0x01, 0x00, 0x00, 
+	0x8B, 0x44, 0x1E, 0x04, 0x8B, 0x55, 0x0C, 0x89, 0x45, 0xF0, 
+	0x8B, 0x44, 0x1E, 0x28, 0x89, 0x02, 0x8B, 0x4C, 0x1E, 0x04, 
+	0x8B, 0x44, 0x1E, 0x20, 0x8B, 0x54, 0x1E, 0x24, 0x83, 0xF9, 
+	0x01, 0x89, 0x45, 0xE8, 0x89, 0x55, 0xEC, 0x74, 0x7D, 0x31, 
+	0xC0, 0x31, 0xD2, 0x83, 0xF9, 0x02, 0x0F, 0x84, 0xD0, 0x00, 
+	0x00, 0x00, 0x8B, 0x4C, 0x1E, 0x1C, 0x39, 0xBB, 0x74, 0xDD, 
+	0xFF, 0xFF, 0x75, 0xAE, 0x03, 0x45, 0xE8, 0x8B, 0x7D, 0x0C, 
+	0x13, 0x55, 0xEC, 0x0F, 0xAD, 0xD0, 0xD3, 0xEA, 0xF6, 0xC1, 
+	0x20, 0x74, 0x04, 0x89, 0xD0, 0x31, 0xD2, 0x83, 0xFA, 0x00, 
+	0x77, 0x0D, 0x31, 0xC9, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x0F, 
+	0x86, 0x4A, 0xFF, 0xFF, 0xFF, 0x31, 0xC9, 0x89, 0xF6, 0x8D, 
+	0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x36, 0x65, 
+	0xC4, 0x83, 0xD2, 0xFF, 0x83, 0xC1, 0x01, 0x83, 0xFA, 0x00, 
+	0x77, 0xF0, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 0xE9, 0x89, 
+	0x47, 0x04, 0x8B, 0x45, 0xF0, 0x01, 0x0F, 0x85, 0xC0, 0x0F, 
+	0x84, 0x29, 0xFF, 0xFF, 0xFF, 0xE9, 0x34, 0xFE, 0xFF, 0xFF, 
+	0x8D, 0x74, 0x26, 0x00, 0xE8, 0x7B, 0xFD, 0xFF, 0xFF, 0x2B, 
+	0x44, 0x1E, 0x08, 0x8B, 0x4C, 0x1E, 0x10, 0x1B, 0x54, 0x1E, 
+	0x0C, 0x21, 0xC1, 0x8B, 0x44, 0x1E, 0x14, 0x89, 0x4D, 0xE4, 
+	0x21, 0xD0, 0x89, 0xC1, 0x8B, 0x44, 0x1E, 0x18, 0x0F, 0xAF, 
+	0xC8, 0xF7, 0x65, 0xE4, 0x01, 0xCA, 0xE9, 0x61, 0xFF, 0xFF, 
+	0xFF, 0x90, 0xE8, 0x4B, 0xFD, 0xFF, 0xFF, 0x2B, 0x44, 0x1E, 
+	0x08, 0x8B, 0x4C, 0x1E, 0x10, 0x1B, 0x54, 0x1E, 0x0C, 0x21, 
+	0xC1, 0x8B, 0x44, 0x1E, 0x14, 0x89, 0x4D, 0xE4, 0x21, 0xD0, 
+	0x89, 0xC1, 0x8B, 0x44, 0x1E, 0x18, 0x0F, 0xAF, 0xC8, 0xF7, 
+	0x65, 0xE4, 0x01, 0xCA, 0xE9, 0x5F, 0xFE, 0xFF, 0xFF, 0x90, 
+	0x8B, 0x83, 0xE4, 0xED, 0xFF, 0xFF, 0x31, 0xD2, 0xEB, 0x9B, 
+	0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x83, 0xE4, 0xED, 
+	0xFF, 0xFF, 0x31, 0xD2, 0xEB, 0xBB, 0x8D, 0xB6, 0x00, 0x00, 
+	0x00, 0x00, 0xF3, 0x90, 0xE9, 0x86, 0xFD, 0xFF, 0xFF, 0x89, 
+	0xF6, 0x8D, 0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x90, 
+	0xE9, 0xB3, 0xFE, 0xFF, 0xFF, 0x89, 0xF6, 0x8D, 0xBC, 0x27, 
+	0x00, 0x00, 0x00, 0x00, 0x55, 0x8D, 0x0D, 0x74, 0xDD, 0xFF, 
+	0xFF, 0x89, 0xE5, 0x57, 0x56, 0x53, 0xE8, 0x92, 0x01, 0x00, 
+	0x00, 0x81, 0xC3, 0x5B, 0xF9, 0xFF, 0xFF, 0x83, 0xEC, 0x10, 
+	0x8B, 0x7D, 0x08, 0x85, 0xFF, 0x0F, 0x84, 0xB6, 0x00, 0x00, 
+	0x00, 0x8B, 0xBB, 0x74, 0xDD, 0xFF, 0xFF, 0xF7, 0xC7, 0x01, 
+	0x00, 0x00, 0x00, 0x0F, 0x85, 0x11, 0x01, 0x00, 0x00, 0x8B, 
+	0x44, 0x19, 0x04, 0x8B, 0x75, 0x08, 0x89, 0x45, 0xF0, 0x8B, 
+	0x44, 0x19, 0x28, 0x89, 0x06, 0x8B, 0x74, 0x19, 0x04, 0x8B, 
+	0x44, 0x19, 0x20, 0x8B, 0x54, 0x19, 0x24, 0x83, 0xFE, 0x01, 
+	0x89, 0x45, 0xE8, 0x89, 0x55, 0xEC, 0x0F, 0x84, 0x9E, 0x00, 
+	0x00, 0x00, 0x31, 0xC0, 0x31, 0xD2, 0x83, 0xFE, 0x02, 0x0F, 
+	0x84, 0xC9, 0x00, 0x00, 0x00, 0x8B, 0x74, 0x19, 0x1C, 0x3B, 
+	0xBB, 0x74, 0xDD, 0xFF, 0xFF, 0x75, 0xAA, 0x03, 0x45, 0xE8, 
+	0x89, 0xF1, 0x8B, 0x7D, 0x08, 0x13, 0x55, 0xEC, 0x0F, 0xAD, 
+	0xD0, 0xD3, 0xEA, 0xF6, 0xC1, 0x20, 0x74, 0x04, 0x89, 0xD0, 
+	0x31, 0xD2, 0x83, 0xFA, 0x00, 0x76, 0x57, 0x31, 0xC9, 0x90, 
+	0x8D, 0x74, 0x26, 0x00, 0x05, 0x00, 0x36, 0x65, 0xC4, 0x83, 
+	0xD2, 0xFF, 0x83, 0xC1, 0x01, 0x83, 0xFA, 0x00, 0x77, 0xF0, 
+	0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 0xE9, 0x8B, 0x75, 0xF0, 
+	0x01, 0x0F, 0x89, 0xC1, 0x89, 0x47, 0x04, 0x85, 0xF6, 0x0F, 
+	0x84, 0x9F, 0x00, 0x00, 0x00, 0xBA, 0xD3, 0x4D, 0x62, 0x10, 
+	0xC1, 0xF9, 0x1F, 0xF7, 0xEA, 0xC1, 0xFA, 0x06, 0x29, 0xCA, 
+	0x89, 0x57, 0x04, 0x8B, 0x55, 0x0C, 0x31, 0xC0, 0x85, 0xD2, 
+	0x75, 0x6B, 0x83, 0xC4, 0x10, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 
+	0x8D, 0x74, 0x26, 0x00, 0x31, 0xC9, 0x3D, 0xFF, 0xC9, 0x9A, 
+	0x3B, 0x76, 0xBE, 0xEB, 0x9E, 0x90, 0x8D, 0x74, 0x26, 0x00, 
+	0x89, 0x4D, 0xE4, 0xE8, 0xD8, 0xFB, 0xFF, 0xFF, 0x8B, 0x4D, 
+	0xE4, 0x2B, 0x44, 0x19, 0x08, 0x8B, 0x74, 0x19, 0x10, 0x1B, 
+	0x54, 0x19, 0x0C, 0x21, 0xC6, 0x8B, 0x44, 0x19, 0x14, 0x89, 
+	0x75, 0xE4, 0x21, 0xD0, 0x89, 0xC6, 0x8B, 0x44, 0x19, 0x18, 
+	0x0F, 0xAF, 0xF0, 0xF7, 0x65, 0xE4, 0x01, 0xF2, 0xE9, 0x3A, 
+	0xFF, 0xFF, 0xFF, 0x8D, 0x76, 0x00, 0x8B, 0x83, 0xE4, 0xED, 
+	0xFF, 0xFF, 0x31, 0xD2, 0xEB, 0xC9, 0x8D, 0xB6, 0x00, 0x00, 
+	0x00, 0x00, 0xF3, 0x90, 0xE9, 0xD6, 0xFE, 0xFF, 0xFF, 0x8B, 
+	0x93, 0xBC, 0xDD, 0xFF, 0xFF, 0x8B, 0x75, 0x0C, 0x89, 0x16, 
+	0x8B, 0x93, 0xC0, 0xDD, 0xFF, 0xFF, 0x89, 0x56, 0x04, 0xE9, 
+	0x7C, 0xFF, 0xFF, 0xFF, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x8B, 
+	0x4D, 0x0C, 0x89, 0xDA, 0x89, 0xFB, 0xE8, 0x67, 0x00, 0x00, 
+	0x00, 0x89, 0xD3, 0xE9, 0x64, 0xFF, 0xFF, 0xFF, 0x55, 0xE8, 
+	0x19, 0x00, 0x00, 0x00, 0x81, 0xC1, 0xE6, 0xF7, 0xFF, 0xFF, 
+	0x89, 0xE5, 0x8B, 0x55, 0x08, 0x8B, 0x81, 0x9C, 0xDD, 0xFF, 
+	0xFF, 0x85, 0xD2, 0x74, 0x02, 0x89, 0x02, 0x5D, 0xC3, 0x8B, 
+	0x0C, 0x24, 0xC3, 0x8B, 0x1C, 0x24, 0xC3, 0x90, 0x90, 0x90, 
+	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xEB, 0x0D, 0x90, 
+	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
+	0x90, 0x90, 0x58, 0xB8, 0x77, 0x00, 0x00, 0x00, 0xCD, 0x80, 
+	0x90, 0x8D, 0xB4, 0x26, 0x00, 0x00, 0x00, 0x00, 0xB8, 0xAD, 
+	0x00, 0x00, 0x00, 0xCD, 0x80, 0x90, 0x90, 0x8D, 0xB4, 0x26, 
+	0x00, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xC3, 0x0E, 0xFB, 0xFF, 
+	0xFF, 0x14, 0x00, 0x00, 0x00, 0x71, 0x00, 0x03, 0x03, 0x05, 
+	0xFB, 0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x72, 0x00, 0x03, 
+	0x03, 0x0F, 0xAE, 0xF0, 0x0F, 0xAE, 0xE8, 0x47, 0x43, 0x43, 
+	0x3A, 0x20, 0x28, 0x47, 0x4E, 0x55, 0x29, 0x20, 0x34, 0x2E, 
+	0x39, 0x2E, 0x31, 0x00, 0x00, 0x2E, 0x73, 0x68, 0x73, 0x74, 
+	0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x68, 0x61, 0x73, 0x68, 
+	0x00, 0x2E, 0x64, 0x79, 0x6E, 0x73, 0x79, 0x6D, 0x00, 0x2E, 
+	0x64, 0x79, 0x6E, 0x73, 0x74, 0x72, 0x00, 0x2E, 0x67, 0x6E, 
+	0x75, 0x2E, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 
+	0x2E, 0x67, 0x6E, 0x75, 0x2E, 0x76, 0x65, 0x72, 0x73, 0x69, 
+	0x6F, 0x6E, 0x5F, 0x64, 0x00, 0x2E, 0x64, 0x79, 0x6E, 0x61, 
+	0x6D, 0x69, 0x63, 0x00, 0x2E, 0x72, 0x6F, 0x64, 0x61, 0x74, 
+	0x61, 0x00, 0x2E, 0x6E, 0x6F, 0x74, 0x65, 0x00, 0x2E, 0x65, 
+	0x68, 0x5F, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x5F, 0x68, 0x64, 
+	0x72, 0x00, 0x2E, 0x65, 0x68, 0x5F, 0x66, 0x72, 0x61, 0x6D, 
+	0x65, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x2E, 0x61, 
+	0x6C, 0x74, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 
+	0x69, 0x6F, 0x6E, 0x73, 0x00, 0x2E, 0x61, 0x6C, 0x74, 0x69, 
+	0x6E, 0x73, 0x74, 0x72, 0x5F, 0x72, 0x65, 0x70, 0x6C, 0x61, 
+	0x63, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x2E, 0x63, 0x6F, 
+	0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 
+	0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xB4, 0x00, 
+	0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
+	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 
+	0x0B, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xEC, 0x00, 
+	0x00, 0x00, 0xEC, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7C, 0x01, 
+	0x00, 0x00, 0x7C, 0x01, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x12, 0x02, 
+	0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 
+	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 
+	0xFD, 0xFF, 0xFF, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x24, 0x02, 
+	0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 
+	0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x78, 0x02, 
+	0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xF8, 0x02, 
+	0x00, 0x00, 0xF8, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 
+	0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x05, 
+	0x00, 0x00, 0x20, 0x05, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5C, 0x05, 
+	0x00, 0x00, 0x5C, 0x05, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x05, 
+	0x00, 0x00, 0x80, 0x05, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x80, 0x06, 
+	0x00, 0x00, 0x80, 0x06, 0x00, 0x00, 0x03, 0x05, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x83, 0x0B, 
+	0x00, 0x00, 0x83, 0x0B, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x9B, 0x0B, 
+	0x00, 0x00, 0x9B, 0x0B, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0xA1, 0x0B, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0xB2, 0x0B, 0x00, 0x00, 0xA2, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static struct page *pages[1];
+
+const struct vdso_image vdso_image_32_int80 = {
+	.data = raw_data,
+	.size = 4096,
+	.text_mapping = {
+		.name = "[vdso]",
+		.pages = pages,
+	},
+	.alt = 2947,
+	.alt_len = 24,
+	.sym_vvar_start = -8192,
+	.sym_vvar_page = -8192,
+	.sym_hpet_page = -4096,
+	.sym___kernel_vsyscall = 2944,
+	.sym___kernel_sigreturn = 2912,
+	.sym___kernel_rt_sigreturn = 2928,
+};
diff -rNu kernel/arch/x86/vdso/vdso-image-32-sysenter.c kernel_old/arch/x86/vdso/vdso-image-32-sysenter.c
--- kernel/arch/x86/vdso/vdso-image-32-sysenter.c	1969-12-31 17:00:00.000000000 -0700
+++ kernel_old/arch/x86/vdso/vdso-image-32-sysenter.c	2017-11-28 20:56:53.829068999 -0700
@@ -0,0 +1,410 @@
+/* AUTOMATICALLY GENERATED -- DO NOT EDIT */
+
+#include <linux/linkage.h>
+#include <asm/page_types.h>
+#include <asm/vdso.h>
+
+static unsigned char raw_data[4096] __page_aligned_data = {
+	0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x80, 0x0B, 0x00, 0x00, 0x34, 0x00, 
+	0x00, 0x00, 0x68, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x34, 0x00, 0x20, 0x00, 0x04, 0x00, 0x28, 0x00, 0x10, 0x00, 
+	0x0F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x0B, 
+	0x00, 0x00, 0xB2, 0x0B, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
+	0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x78, 0x02, 
+	0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 
+	0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x0C, 0x05, 0x00, 0x00, 0x0C, 0x05, 0x00, 0x00, 0x0C, 0x05, 
+	0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
+	0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0xE5, 
+	0x74, 0x64, 0x48, 0x05, 0x00, 0x00, 0x48, 0x05, 0x00, 0x00, 
+	0x48, 0x05, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x24, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
+	0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0xF1, 0xFF, 0x16, 0x00, 
+	0x00, 0x00, 0x80, 0x0B, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 
+	0x12, 0x00, 0x0B, 0x00, 0x28, 0x00, 0x00, 0x00, 0xA0, 0x09, 
+	0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 
+	0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x11, 0x00, 0xF1, 0xFF, 0x5B, 0x00, 0x00, 0x00, 
+	0x70, 0x0B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x00, 
+	0x0B, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x06, 0x00, 0x00, 
+	0xC7, 0x02, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 0x48, 0x00, 
+	0x00, 0x00, 0x60, 0x0B, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
+	0x12, 0x00, 0x0B, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x20, 0x0B, 
+	0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x12, 0x00, 0x0B, 0x00, 
+	0x00, 0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x63, 0x6C, 
+	0x6F, 0x63, 0x6B, 0x5F, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6D, 
+	0x65, 0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 
+	0x5F, 0x76, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6C, 0x6C, 0x00, 
+	0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x67, 0x65, 0x74, 
+	0x74, 0x69, 0x6D, 0x65, 0x6F, 0x66, 0x64, 0x61, 0x79, 0x00, 
+	0x5F, 0x5F, 0x76, 0x64, 0x73, 0x6F, 0x5F, 0x74, 0x69, 0x6D, 
+	0x65, 0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 
+	0x5F, 0x73, 0x69, 0x67, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 
+	0x00, 0x5F, 0x5F, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 0x5F, 
+	0x72, 0x74, 0x5F, 0x73, 0x69, 0x67, 0x72, 0x65, 0x74, 0x75, 
+	0x72, 0x6E, 0x00, 0x6C, 0x69, 0x6E, 0x75, 0x78, 0x2D, 0x67, 
+	0x61, 0x74, 0x65, 0x2E, 0x73, 0x6F, 0x2E, 0x31, 0x00, 0x4C, 
+	0x49, 0x4E, 0x55, 0x58, 0x5F, 0x32, 0x2E, 0x36, 0x00, 0x4C, 
+	0x49, 0x4E, 0x55, 0x58, 0x5F, 0x32, 0x2E, 0x35, 0x00, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03, 0x00, 
+	0x03, 0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01, 0x00, 
+	0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x91, 0xF0, 0xCE, 0x0F, 
+	0x14, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x71, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x02, 0x00, 0x01, 0x00, 0xF6, 0x75, 0xAE, 0x03, 0x14, 0x00, 
+	0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 
+	0x01, 0x00, 0xF5, 0x75, 0xAE, 0x03, 0x14, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 
+	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
+	0x7C, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xEC, 0x00, 
+	0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 
+	0x0B, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xFC, 0xFF, 
+	0xFF, 0x6F, 0x24, 0x02, 0x00, 0x00, 0xFD, 0xFF, 0xFF, 0x6F, 
+	0x03, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x6F, 0x12, 0x02, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x78, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x47, 0x4E, 0x55, 0x00, 0xFA, 0xF0, 
+	0x36, 0xB8, 0x98, 0xAF, 0xA3, 0x75, 0xD5, 0x8A, 0x11, 0x62, 
+	0x82, 0x49, 0x6E, 0x79, 0xFA, 0x64, 0xC0, 0x97, 0x06, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x4C, 0x69, 0x6E, 0x75, 0x78, 0x00, 0x00, 0x00, 0x08, 0x13, 
+	0x03, 0x00, 0x01, 0x1B, 0x03, 0x3B, 0x20, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x17, 0x06, 0x00, 0x00, 0x38, 0x00, 
+	0x00, 0x00, 0x27, 0x06, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x00, 
+	0x38, 0x06, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x10, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x53, 
+	0x00, 0x01, 0x7C, 0x08, 0x01, 0x1B, 0x00, 0x00, 0x68, 0x00, 
+	0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xD7, 0x05, 0x00, 0x00, 
+	0x09, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x74, 0x20, 0x06, 
+	0x10, 0x00, 0x02, 0x74, 0x30, 0x10, 0x01, 0x02, 0x74, 0x2C, 
+	0x10, 0x02, 0x02, 0x74, 0x28, 0x10, 0x03, 0x02, 0x74, 0x24, 
+	0x10, 0x05, 0x02, 0x74, 0x1C, 0x10, 0x06, 0x02, 0x74, 0x18, 
+	0x10, 0x07, 0x02, 0x74, 0x14, 0x10, 0x08, 0x02, 0x74, 0x3C, 
+	0x42, 0x0F, 0x03, 0x74, 0x1C, 0x06, 0x10, 0x00, 0x02, 0x74, 
+	0x2C, 0x10, 0x01, 0x02, 0x74, 0x28, 0x10, 0x02, 0x02, 0x74, 
+	0x24, 0x10, 0x03, 0x02, 0x74, 0x20, 0x10, 0x05, 0x02, 0x74, 
+	0x18, 0x10, 0x06, 0x02, 0x74, 0x14, 0x10, 0x07, 0x02, 0x74, 
+	0x10, 0x10, 0x08, 0x02, 0x74, 0x38, 0x44, 0x00, 0x00, 0x00, 
+	0x84, 0x00, 0x00, 0x00, 0x7B, 0x05, 0x00, 0x00, 0x08, 0x00, 
+	0x00, 0x00, 0x00, 0x0F, 0x04, 0x74, 0xBC, 0x01, 0x06, 0x10, 
+	0x00, 0x03, 0x74, 0xCC, 0x01, 0x10, 0x01, 0x03, 0x74, 0xC8, 
+	0x01, 0x10, 0x02, 0x03, 0x74, 0xC4, 0x01, 0x10, 0x03, 0x03, 
+	0x74, 0xC0, 0x01, 0x10, 0x05, 0x03, 0x74, 0xB8, 0x01, 0x10, 
+	0x06, 0x03, 0x74, 0xB4, 0x01, 0x10, 0x07, 0x03, 0x74, 0xB0, 
+	0x01, 0x10, 0x08, 0x03, 0x74, 0xD8, 0x01, 0x00, 0x14, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x00, 
+	0x01, 0x7C, 0x08, 0x01, 0x1B, 0x0C, 0x04, 0x04, 0x88, 0x01, 
+	0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 
+	0x2C, 0x05, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x41, 
+	0x0E, 0x08, 0x41, 0x0E, 0x0C, 0x41, 0x0E, 0x10, 0x85, 0x04, 
+	0x4E, 0x0E, 0x0C, 0xC5, 0x41, 0x0E, 0x08, 0x41, 0x0E, 0x04, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x55, 0x89, 0xE5, 0x56, 0x53, 0xE8, 
+	0xB9, 0x04, 0x00, 0x00, 0x81, 0xC3, 0x6E, 0xFC, 0xFF, 0xFF, 
+	0x51, 0x8D, 0x76, 0x00, 0x8D, 0x76, 0x00, 0x0F, 0x31, 0x8B, 
+	0x8B, 0x94, 0xDD, 0xFF, 0xFF, 0x8B, 0xB3, 0x90, 0xDD, 0xFF, 
+	0xFF, 0x39, 0xCA, 0x77, 0x07, 0x73, 0x0D, 0x89, 0xF0, 0x89, 
+	0xCA, 0x90, 0x59, 0x5B, 0x5E, 0x5D, 0xC3, 0x8D, 0x76, 0x00, 
+	0x39, 0xF0, 0x72, 0xEF, 0x59, 0x5B, 0x5E, 0x5D, 0xC3, 0xEB, 
+	0x0D, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
+	0x90, 0x90, 0x90, 0x90, 0x55, 0x89, 0xE5, 0x57, 0x56, 0x53, 
+	0x8D, 0x35, 0x88, 0xDD, 0xFF, 0xFF, 0xE8, 0x62, 0x04, 0x00, 
+	0x00, 0x81, 0xC3, 0x17, 0xFC, 0xFF, 0xFF, 0x83, 0xEC, 0x10, 
+	0x83, 0x7D, 0x08, 0x01, 0x8B, 0x7D, 0x0C, 0x0F, 0x84, 0x81, 
+	0x00, 0x00, 0x00, 0x0F, 0x8E, 0x43, 0x01, 0x00, 0x00, 0x83, 
+	0x7D, 0x08, 0x05, 0x74, 0x45, 0x83, 0x7D, 0x08, 0x06, 0x0F, 
+	0x85, 0x13, 0x01, 0x00, 0x00, 0x8B, 0x83, 0x88, 0xDD, 0xFF, 
+	0xFF, 0xA8, 0x01, 0x0F, 0x85, 0x65, 0x02, 0x00, 0x00, 0x8B, 
+	0x54, 0x1E, 0x40, 0x89, 0x17, 0x8B, 0x54, 0x1E, 0x44, 0x89, 
+	0x57, 0x04, 0x39, 0x83, 0x88, 0xDD, 0xFF, 0xFF, 0x75, 0xDD, 
+	0x83, 0xC4, 0x10, 0x31, 0xC0, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 
+	0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x90, 0x8D, 0xB6, 
+	0x00, 0x00, 0x00, 0x00, 0x8B, 0x83, 0x88, 0xDD, 0xFF, 0xFF, 
+	0xA8, 0x01, 0x75, 0xEE, 0x8B, 0x54, 0x1E, 0x38, 0x89, 0x17, 
+	0x8B, 0x54, 0x1E, 0x3C, 0x89, 0x57, 0x04, 0x3B, 0x83, 0x88, 
+	0xDD, 0xFF, 0xFF, 0x74, 0xC9, 0xEB, 0xDF, 0x8D, 0xB4, 0x26, 
+	0x00, 0x00, 0x00, 0x00, 0xF3, 0x90, 0x8D, 0xB6, 0x00, 0x00, 
+	0x00, 0x00, 0x8B, 0xBB, 0x88, 0xDD, 0xFF, 0xFF, 0xF7, 0xC7, 
+	0x01, 0x00, 0x00, 0x00, 0x75, 0xEA, 0x8B, 0x44, 0x1E, 0x04, 
+	0x8B, 0x55, 0x0C, 0x89, 0x45, 0xF0, 0x8B, 0x44, 0x1E, 0x2C, 
+	0x89, 0x02, 0x8B, 0x4C, 0x1E, 0x04, 0x8B, 0x44, 0x1E, 0x30, 
+	0x8B, 0x54, 0x1E, 0x34, 0x83, 0xF9, 0x01, 0x89, 0x45, 0xE8, 
+	0x89, 0x55, 0xEC, 0x0F, 0x84, 0x7F, 0x01, 0x00, 0x00, 0x31, 
+	0xC0, 0x31, 0xD2, 0x83, 0xF9, 0x02, 0x0F, 0x84, 0xB2, 0x01, 
+	0x00, 0x00, 0x8B, 0x4C, 0x1E, 0x1C, 0x3B, 0xBB, 0x88, 0xDD, 
+	0xFF, 0xFF, 0x75, 0xAE, 0x03, 0x45, 0xE8, 0x8B, 0x7D, 0x0C, 
+	0x13, 0x55, 0xEC, 0x0F, 0xAD, 0xD0, 0xD3, 0xEA, 0xF6, 0xC1, 
+	0x20, 0x74, 0x04, 0x89, 0xD0, 0x31, 0xD2, 0x83, 0xFA, 0x00, 
+	0x77, 0x09, 0x31, 0xC9, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x76, 
+	0x20, 0x31, 0xC9, 0x8D, 0xB4, 0x26, 0x00, 0x00, 0x00, 0x00, 
+	0x05, 0x00, 0x36, 0x65, 0xC4, 0x83, 0xD2, 0xFF, 0x83, 0xC1, 
+	0x01, 0x83, 0xFA, 0x00, 0x77, 0xF0, 0x3D, 0xFF, 0xC9, 0x9A, 
+	0x3B, 0x77, 0xE9, 0x89, 0x47, 0x04, 0x8B, 0x45, 0xF0, 0x01, 
+	0x0F, 0x85, 0xC0, 0x0F, 0x85, 0x11, 0xFF, 0xFF, 0xFF, 0x90, 
+	0x89, 0xF9, 0xB8, 0x09, 0x01, 0x00, 0x00, 0x89, 0xDA, 0x8B, 
+	0x5D, 0x08, 0xE8, 0x4F, 0x03, 0x00, 0x00, 0x89, 0xD3, 0x83, 
+	0xC4, 0x10, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 0x90, 0x8D, 0x74, 
+	0x26, 0x00, 0x8B, 0x55, 0x08, 0x85, 0xD2, 0x75, 0xD9, 0x89, 
+	0x7D, 0x0C, 0x8B, 0xBB, 0x88, 0xDD, 0xFF, 0xFF, 0xF7, 0xC7, 
+	0x01, 0x00, 0x00, 0x00, 0x0F, 0x85, 0x34, 0x01, 0x00, 0x00, 
+	0x8B, 0x44, 0x1E, 0x04, 0x8B, 0x55, 0x0C, 0x89, 0x45, 0xF0, 
+	0x8B, 0x44, 0x1E, 0x28, 0x89, 0x02, 0x8B, 0x4C, 0x1E, 0x04, 
+	0x8B, 0x44, 0x1E, 0x20, 0x8B, 0x54, 0x1E, 0x24, 0x83, 0xF9, 
+	0x01, 0x89, 0x45, 0xE8, 0x89, 0x55, 0xEC, 0x74, 0x7D, 0x31, 
+	0xC0, 0x31, 0xD2, 0x83, 0xF9, 0x02, 0x0F, 0x84, 0xD0, 0x00, 
+	0x00, 0x00, 0x8B, 0x4C, 0x1E, 0x1C, 0x39, 0xBB, 0x88, 0xDD, 
+	0xFF, 0xFF, 0x75, 0xAE, 0x03, 0x45, 0xE8, 0x8B, 0x7D, 0x0C, 
+	0x13, 0x55, 0xEC, 0x0F, 0xAD, 0xD0, 0xD3, 0xEA, 0xF6, 0xC1, 
+	0x20, 0x74, 0x04, 0x89, 0xD0, 0x31, 0xD2, 0x83, 0xFA, 0x00, 
+	0x77, 0x0D, 0x31, 0xC9, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x0F, 
+	0x86, 0x4A, 0xFF, 0xFF, 0xFF, 0x31, 0xC9, 0x89, 0xF6, 0x8D, 
+	0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x36, 0x65, 
+	0xC4, 0x83, 0xD2, 0xFF, 0x83, 0xC1, 0x01, 0x83, 0xFA, 0x00, 
+	0x77, 0xF0, 0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 0xE9, 0x89, 
+	0x47, 0x04, 0x8B, 0x45, 0xF0, 0x01, 0x0F, 0x85, 0xC0, 0x0F, 
+	0x84, 0x29, 0xFF, 0xFF, 0xFF, 0xE9, 0x34, 0xFE, 0xFF, 0xFF, 
+	0x8D, 0x74, 0x26, 0x00, 0xE8, 0x7B, 0xFD, 0xFF, 0xFF, 0x2B, 
+	0x44, 0x1E, 0x08, 0x8B, 0x4C, 0x1E, 0x10, 0x1B, 0x54, 0x1E, 
+	0x0C, 0x21, 0xC1, 0x8B, 0x44, 0x1E, 0x14, 0x89, 0x4D, 0xE4, 
+	0x21, 0xD0, 0x89, 0xC1, 0x8B, 0x44, 0x1E, 0x18, 0x0F, 0xAF, 
+	0xC8, 0xF7, 0x65, 0xE4, 0x01, 0xCA, 0xE9, 0x61, 0xFF, 0xFF, 
+	0xFF, 0x90, 0xE8, 0x4B, 0xFD, 0xFF, 0xFF, 0x2B, 0x44, 0x1E, 
+	0x08, 0x8B, 0x4C, 0x1E, 0x10, 0x1B, 0x54, 0x1E, 0x0C, 0x21, 
+	0xC1, 0x8B, 0x44, 0x1E, 0x14, 0x89, 0x4D, 0xE4, 0x21, 0xD0, 
+	0x89, 0xC1, 0x8B, 0x44, 0x1E, 0x18, 0x0F, 0xAF, 0xC8, 0xF7, 
+	0x65, 0xE4, 0x01, 0xCA, 0xE9, 0x5F, 0xFE, 0xFF, 0xFF, 0x90, 
+	0x8B, 0x83, 0xF8, 0xED, 0xFF, 0xFF, 0x31, 0xD2, 0xEB, 0x9B, 
+	0x8D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x83, 0xF8, 0xED, 
+	0xFF, 0xFF, 0x31, 0xD2, 0xEB, 0xBB, 0x8D, 0xB6, 0x00, 0x00, 
+	0x00, 0x00, 0xF3, 0x90, 0xE9, 0x86, 0xFD, 0xFF, 0xFF, 0x89, 
+	0xF6, 0x8D, 0xBC, 0x27, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x90, 
+	0xE9, 0xB3, 0xFE, 0xFF, 0xFF, 0x89, 0xF6, 0x8D, 0xBC, 0x27, 
+	0x00, 0x00, 0x00, 0x00, 0x55, 0x8D, 0x0D, 0x88, 0xDD, 0xFF, 
+	0xFF, 0x89, 0xE5, 0x57, 0x56, 0x53, 0xE8, 0x92, 0x01, 0x00, 
+	0x00, 0x81, 0xC3, 0x47, 0xF9, 0xFF, 0xFF, 0x83, 0xEC, 0x10, 
+	0x8B, 0x7D, 0x08, 0x85, 0xFF, 0x0F, 0x84, 0xB6, 0x00, 0x00, 
+	0x00, 0x8B, 0xBB, 0x88, 0xDD, 0xFF, 0xFF, 0xF7, 0xC7, 0x01, 
+	0x00, 0x00, 0x00, 0x0F, 0x85, 0x11, 0x01, 0x00, 0x00, 0x8B, 
+	0x44, 0x19, 0x04, 0x8B, 0x75, 0x08, 0x89, 0x45, 0xF0, 0x8B, 
+	0x44, 0x19, 0x28, 0x89, 0x06, 0x8B, 0x74, 0x19, 0x04, 0x8B, 
+	0x44, 0x19, 0x20, 0x8B, 0x54, 0x19, 0x24, 0x83, 0xFE, 0x01, 
+	0x89, 0x45, 0xE8, 0x89, 0x55, 0xEC, 0x0F, 0x84, 0x9E, 0x00, 
+	0x00, 0x00, 0x31, 0xC0, 0x31, 0xD2, 0x83, 0xFE, 0x02, 0x0F, 
+	0x84, 0xC9, 0x00, 0x00, 0x00, 0x8B, 0x74, 0x19, 0x1C, 0x3B, 
+	0xBB, 0x88, 0xDD, 0xFF, 0xFF, 0x75, 0xAA, 0x03, 0x45, 0xE8, 
+	0x89, 0xF1, 0x8B, 0x7D, 0x08, 0x13, 0x55, 0xEC, 0x0F, 0xAD, 
+	0xD0, 0xD3, 0xEA, 0xF6, 0xC1, 0x20, 0x74, 0x04, 0x89, 0xD0, 
+	0x31, 0xD2, 0x83, 0xFA, 0x00, 0x76, 0x57, 0x31, 0xC9, 0x90, 
+	0x8D, 0x74, 0x26, 0x00, 0x05, 0x00, 0x36, 0x65, 0xC4, 0x83, 
+	0xD2, 0xFF, 0x83, 0xC1, 0x01, 0x83, 0xFA, 0x00, 0x77, 0xF0, 
+	0x3D, 0xFF, 0xC9, 0x9A, 0x3B, 0x77, 0xE9, 0x8B, 0x75, 0xF0, 
+	0x01, 0x0F, 0x89, 0xC1, 0x89, 0x47, 0x04, 0x85, 0xF6, 0x0F, 
+	0x84, 0x9F, 0x00, 0x00, 0x00, 0xBA, 0xD3, 0x4D, 0x62, 0x10, 
+	0xC1, 0xF9, 0x1F, 0xF7, 0xEA, 0xC1, 0xFA, 0x06, 0x29, 0xCA, 
+	0x89, 0x57, 0x04, 0x8B, 0x55, 0x0C, 0x31, 0xC0, 0x85, 0xD2, 
+	0x75, 0x6B, 0x83, 0xC4, 0x10, 0x5B, 0x5E, 0x5F, 0x5D, 0xC3, 
+	0x8D, 0x74, 0x26, 0x00, 0x31, 0xC9, 0x3D, 0xFF, 0xC9, 0x9A, 
+	0x3B, 0x76, 0xBE, 0xEB, 0x9E, 0x90, 0x8D, 0x74, 0x26, 0x00, 
+	0x89, 0x4D, 0xE4, 0xE8, 0xD8, 0xFB, 0xFF, 0xFF, 0x8B, 0x4D, 
+	0xE4, 0x2B, 0x44, 0x19, 0x08, 0x8B, 0x74, 0x19, 0x10, 0x1B, 
+	0x54, 0x19, 0x0C, 0x21, 0xC6, 0x8B, 0x44, 0x19, 0x14, 0x89, 
+	0x75, 0xE4, 0x21, 0xD0, 0x89, 0xC6, 0x8B, 0x44, 0x19, 0x18, 
+	0x0F, 0xAF, 0xF0, 0xF7, 0x65, 0xE4, 0x01, 0xF2, 0xE9, 0x3A, 
+	0xFF, 0xFF, 0xFF, 0x8D, 0x76, 0x00, 0x8B, 0x83, 0xF8, 0xED, 
+	0xFF, 0xFF, 0x31, 0xD2, 0xEB, 0xC9, 0x8D, 0xB6, 0x00, 0x00, 
+	0x00, 0x00, 0xF3, 0x90, 0xE9, 0xD6, 0xFE, 0xFF, 0xFF, 0x8B, 
+	0x93, 0xD0, 0xDD, 0xFF, 0xFF, 0x8B, 0x75, 0x0C, 0x89, 0x16, 
+	0x8B, 0x93, 0xD4, 0xDD, 0xFF, 0xFF, 0x89, 0x56, 0x04, 0xE9, 
+	0x7C, 0xFF, 0xFF, 0xFF, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x8B, 
+	0x4D, 0x0C, 0x89, 0xDA, 0x89, 0xFB, 0xE8, 0x67, 0x00, 0x00, 
+	0x00, 0x89, 0xD3, 0xE9, 0x64, 0xFF, 0xFF, 0xFF, 0x55, 0xE8, 
+	0x19, 0x00, 0x00, 0x00, 0x81, 0xC1, 0xD2, 0xF7, 0xFF, 0xFF, 
+	0x89, 0xE5, 0x8B, 0x55, 0x08, 0x8B, 0x81, 0xB0, 0xDD, 0xFF, 
+	0xFF, 0x85, 0xD2, 0x74, 0x02, 0x89, 0x02, 0x5D, 0xC3, 0x8B, 
+	0x0C, 0x24, 0xC3, 0x8B, 0x1C, 0x24, 0xC3, 0x90, 0x90, 0x90, 
+	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xEB, 0x0D, 0x90, 
+	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
+	0x90, 0x90, 0x58, 0xB8, 0x77, 0x00, 0x00, 0x00, 0xCD, 0x80, 
+	0x90, 0x8D, 0xB4, 0x26, 0x00, 0x00, 0x00, 0x00, 0xB8, 0xAD, 
+	0x00, 0x00, 0x00, 0xCD, 0x80, 0x90, 0x90, 0x8D, 0xB4, 0x26, 
+	0x00, 0x00, 0x00, 0x00, 0x51, 0x52, 0x55, 0x89, 0xE5, 0x0F, 
+	0x34, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xCD, 0x80, 
+	0x5D, 0x5A, 0x59, 0xC3, 0xFD, 0xFA, 0xFF, 0xFF, 0x14, 0x00, 
+	0x00, 0x00, 0x71, 0x00, 0x03, 0x03, 0xF4, 0xFA, 0xFF, 0xFF, 
+	0x0B, 0x00, 0x00, 0x00, 0x72, 0x00, 0x03, 0x03, 0x0F, 0xAE, 
+	0xF0, 0x0F, 0xAE, 0xE8, 0x47, 0x43, 0x43, 0x3A, 0x20, 0x28, 
+	0x47, 0x4E, 0x55, 0x29, 0x20, 0x34, 0x2E, 0x39, 0x2E, 0x31, 
+	0x00, 0x00, 0x2E, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61, 
+	0x62, 0x00, 0x2E, 0x68, 0x61, 0x73, 0x68, 0x00, 0x2E, 0x64, 
+	0x79, 0x6E, 0x73, 0x79, 0x6D, 0x00, 0x2E, 0x64, 0x79, 0x6E, 
+	0x73, 0x74, 0x72, 0x00, 0x2E, 0x67, 0x6E, 0x75, 0x2E, 0x76, 
+	0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x2E, 0x67, 0x6E, 
+	0x75, 0x2E, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x5F, 
+	0x64, 0x00, 0x2E, 0x64, 0x79, 0x6E, 0x61, 0x6D, 0x69, 0x63, 
+	0x00, 0x2E, 0x72, 0x6F, 0x64, 0x61, 0x74, 0x61, 0x00, 0x2E, 
+	0x6E, 0x6F, 0x74, 0x65, 0x00, 0x2E, 0x65, 0x68, 0x5F, 0x66, 
+	0x72, 0x61, 0x6D, 0x65, 0x5F, 0x68, 0x64, 0x72, 0x00, 0x2E, 
+	0x65, 0x68, 0x5F, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x00, 0x2E, 
+	0x74, 0x65, 0x78, 0x74, 0x00, 0x2E, 0x61, 0x6C, 0x74, 0x69, 
+	0x6E, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 
+	0x73, 0x00, 0x2E, 0x61, 0x6C, 0x74, 0x69, 0x6E, 0x73, 0x74, 
+	0x72, 0x5F, 0x72, 0x65, 0x70, 0x6C, 0x61, 0x63, 0x65, 0x6D, 
+	0x65, 0x6E, 0x74, 0x00, 0x2E, 0x63, 0x6F, 0x6D, 0x6D, 0x65, 
+	0x6E, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 
+	0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xB4, 0x00, 
+	0x00, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
+	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 
+	0x0B, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xEC, 0x00, 
+	0x00, 0x00, 0xEC, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7C, 0x01, 
+	0x00, 0x00, 0x7C, 0x01, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x12, 0x02, 
+	0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 
+	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 
+	0xFD, 0xFF, 0xFF, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x24, 0x02, 
+	0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 
+	0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x78, 0x02, 
+	0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xF8, 0x02, 
+	0x00, 0x00, 0xF8, 0x02, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 
+	0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0C, 0x05, 
+	0x00, 0x00, 0x0C, 0x05, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x05, 
+	0x00, 0x00, 0x48, 0x05, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6C, 0x05, 
+	0x00, 0x00, 0x6C, 0x05, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x80, 0x06, 
+	0x00, 0x00, 0x80, 0x06, 0x00, 0x00, 0x14, 0x05, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x0B, 
+	0x00, 0x00, 0x94, 0x0B, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xAC, 0x0B, 
+	0x00, 0x00, 0xAC, 0x0B, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 
+	0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0xB2, 0x0B, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
+	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0xC3, 0x0B, 0x00, 0x00, 0xA2, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static struct page *pages[1];
+
+const struct vdso_image vdso_image_32_sysenter = {
+	.data = raw_data,
+	.size = 4096,
+	.text_mapping = {
+		.name = "[vdso]",
+		.pages = pages,
+	},
+	.alt = 2964,
+	.alt_len = 24,
+	.sym_vvar_start = -8192,
+	.sym_vvar_page = -8192,
+	.sym_hpet_page = -4096,
+	.sym_VDSO32_SYSENTER_RETURN = 2960,
+	.sym___kernel_vsyscall = 2944,
+	.sym___kernel_sigreturn = 2912,
+	.sym___kernel_rt_sigreturn = 2928,
+};
diff -rNu kernel/barrier/barrier_sys.c kernel_old/barrier/barrier_sys.c
--- kernel/barrier/barrier_sys.c	1969-12-31 17:00:00.000000000 -0700
+++ kernel_old/barrier/barrier_sys.c	2017-11-28 20:52:09.879165000 -0700
@@ -0,0 +1,303 @@
+#include <linux/kernel.h>
+#include <linux/unistd.h>
+#include <linux/linkage.h>
+#include <linux/fs.h>
+#include <linux/sched.h>
+#include <linux/delay.h>
+#include <linux/hrtimer.h>
+#include <linux/ktime.h>
+#include <linux/time.h>
+#include <linux/slab.h>
+#include <linux/wait.h>
+#include <linux/list.h>
+#include <linux/mutex.h>
+#include <linux/syscalls.h>
+#include <asm/uaccess.h>
+#include <linux/init.h>
+#include <linux/kthread.h>
+
+
+#define MS_TO_NS(x) (x* 1000000)
+#define list_to_barrier(x) container_of(x,struct barrier,list)
+
+/**************************************global declarations**********************************
+
+barrier_list : head of linked list
+wait_lock : mutex lock used for locking linked list in wait function
+init_dest_lock : mutex lock for locking linked list in init and destroy function
+first_flag : flag to check whether it is the first time the barrier_init is called
+
+*********************************************************************************************/
+static struct list_head barrier_list;
+static struct mutex wait_lock;
+static struct mutex init_dest_lock;
+static atomic_t first_flag;
+
+
+/*************************************barrier structure*********************************
+
+struct barrier : the per barrier structure to store the required elements
+sync_num : Counter to store the no:of synchronisations
+left : To keep count of no:of threads which are in sleep in a partcualar synchronisation
+init_count : variable to store the no:of threadds to be synchronised by barrier
+barrier_lock : mutex lock per barrier structure 
+hr_timer : hr timer structure per barrier to generate an interrupt in case of timeout
+tgid : variable to store the tgid of thread or pid of child process controlling the thread
+timeout : variable to store the timeout value in ns
+my_queue : wait queue per barrier in which the threads sleep based on condition
+cond_flag : flag which decides the outcome of expression in wait_event_interruptible
+timeout_flag : this flag is raised when there is a timeout
+list : list_head node for maintaining the barrier structures in a linked list
+
+*****************************************************************************************/
+
+struct barrier{
+  unsigned int sync_num;
+  unsigned int left;
+  unsigned int init_count;
+  unsigned int barrier_id;
+  struct mutex barrier_lock;
+  struct hrtimer hr_timer;
+  pid_t tgid;
+  ktime_t ktime;
+  int timeout;
+  wait_queue_head_t my_queue;
+  atomic_t cond_flag;
+  bool timeout_flag;
+  struct list_head list;
+};
+
+asmlinkage long barrier_init(unsigned int count, signed int timeout);
+asmlinkage long barrier_wait(unsigned int barrier_id);
+asmlinkage long barrier_destroy(unsigned int barrier_id);
+
+/********************* hr timer callback function called when there is a timeout***************/
+enum hrtimer_restart my_callback(struct hrtimer *hr_timer)
+{
+  struct barrier *barrier = container_of(hr_timer,struct barrier,hr_timer);
+  printk("TIMER EXPIRED\n");
+  atomic_set(&barrier->cond_flag,1);
+  barrier->timeout_flag = 1;
+  wake_up_all(&barrier->my_queue);
+
+  return HRTIMER_NORESTART;
+}
+/***********************************************************************************************/
+
+
+/*************************barrier_init function for initialising a new barrier******************/
+
+SYSCALL_DEFINE2(barrier_init, unsigned int, count, signed int, timeout)
+{
+  struct barrier *barrier;
+  struct list_head *loop; 
+  int num_barriers;  
+  
+  //checking whether it is the first time call to barrier_init to initialise the global list head and mutex locks
+  if(atomic_read(&first_flag) == 0)
+  { 
+    atomic_set(&first_flag,1);  
+    INIT_LIST_HEAD(&barrier_list);
+    mutex_init(&init_dest_lock);
+    mutex_init(&wait_lock);
+  }
+
+  num_barriers = 0;
+
+  //counting the no:of barriers with the current tgid
+  list_for_each(loop,&barrier_list)
+  {
+    if (list_to_barrier(loop)->tgid == current->tgid)
+      num_barriers++;
+  }
+
+  mutex_lock(&init_dest_lock);
+  
+  //allocating a new barrier structure for the current tgid or the child process
+  barrier = kmalloc(sizeof(struct barrier),GFP_KERNEL);
+  barrier->barrier_id = num_barriers+1;
+  list_add(&barrier->list,&barrier_list);
+
+  barrier->sync_num = 0;
+  barrier->init_count = count;
+  barrier-> left = count;
+  barrier->tgid = current->tgid;
+  
+  //initialising the wait queue of barrier
+  init_waitqueue_head(&barrier->my_queue);
+  atomic_set(&barrier->cond_flag,0);
+
+  //initialise the hr timer only if the timeout value entered is greater than zero
+  if(timeout > 0)
+  {
+    barrier->ktime = ktime_set(0,timeout);
+    hrtimer_init(&barrier->hr_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+    barrier->hr_timer.function = &my_callback;
+  }
+
+  barrier->timeout = timeout;
+
+  mutex_init(&barrier->barrier_lock);
+
+  printk("initialisation of barrier %d done for process with tgid %d\n",barrier->barrier_id,barrier->tgid);
+
+  mutex_unlock(&init_dest_lock);
+
+  return barrier->barrier_id;
+
+}
+
+/**********************************************************************************************/
+
+
+/*******************barrier_wait function called by a thread to be synchronised****************/
+
+SYSCALL_DEFINE1(barrier_wait, unsigned int, barrier_id)
+{
+  struct list_head *loop;  
+  struct barrier *barrier;
+
+  mutex_lock(&wait_lock);
+    
+  //finding the appropriate barrier for the thread
+  list_for_each(loop,&barrier_list)
+  {
+    barrier = list_to_barrier(loop);
+    if((barrier->barrier_id == barrier_id) && (barrier->tgid == current->tgid))
+      break;
+  }
+
+  //return error if barrier id is invalid
+  if(loop == &barrier_list)
+  {
+    printk("barrier id for thread id: %d tgid : %d not found\n",current->pid,current->tgid);
+    mutex_unlock(&wait_lock);
+    return -EINVAL;
+  }
+
+  mutex_unlock(&wait_lock);
+
+  //wait till all the threads have woken up from previous iteration or after timeout
+  wait_event_interruptible(barrier->my_queue,(atomic_read(&barrier->cond_flag)==0));
+  
+  //Thread synchronisation logic//
+
+  mutex_lock_interruptible(&barrier->barrier_lock);    
+  
+  //checking if the thread is the first one to reach barrier
+
+  if(barrier->left == barrier->init_count)
+  {
+    printk("starting syncronisation %d for barrier %d tgid : %d \n",(barrier->sync_num+1),barrier->barrier_id,current->tgid);
+        
+    //starting the hr timer if timeout is value for barrier is positive
+    if(barrier->timeout > 0)
+    {
+      hrtimer_start(&barrier->hr_timer, barrier->ktime, HRTIMER_MODE_REL);  
+    } 
+  }
+
+  printk("thread with pid: %d tgid : %d entered barrier %d\n",current->pid,current->tgid,barrier->barrier_id);
+
+  barrier->left--;
+
+  //thread goes to sleep if it is not the last thread of barrier
+  if(barrier->left)
+  {
+    mutex_unlock(&barrier->barrier_lock);  
+    wait_event_interruptible(barrier->my_queue,(atomic_read(&barrier->cond_flag)==1));
+  }
+
+  //last thread wakes up the sleeping threads
+  else
+  {
+    if(barrier->timeout > 0)
+      hrtimer_cancel(&barrier->hr_timer);
+    
+    //set the cond_flag and wake up all    
+    atomic_set(&barrier->cond_flag,1);
+    wake_up_all(&barrier->my_queue);
+    barrier->left++;
+    mutex_unlock(&barrier->barrier_lock);
+    printk("thread with pid : %d tgid : %d waking up sleeping threads in barrier %d\n",current->pid,current->tgid,barrier->barrier_id);           
+    return 0;
+  }
+
+  mutex_lock_interruptible(&barrier->barrier_lock);
+
+  printk("thread in with pid : %d tgid : %d woke up in barrier %d\n",current->pid,current->tgid,barrier->barrier_id);
+   
+  //increments the left variable and checks each time if all threads have woken
+  barrier->left++;
+
+  if(barrier->left == barrier->init_count)
+  {        
+    //resetting the flags
+    barrier->timeout_flag = 0;
+    atomic_set(&barrier->cond_flag,0);
+
+    //incrementing syncronisation count
+    barrier->sync_num++;
+    wake_up_all(&barrier->my_queue);
+  }
+
+  //checks if the threads are woken because of timeout and returns the error
+  if(barrier->timeout_flag)
+  {
+    mutex_unlock(&barrier->barrier_lock); 
+    return -ETIME;
+  }
+
+  else
+  {
+    mutex_unlock(&barrier->barrier_lock);
+    return 0;
+  }
+}
+
+/***********************************************************************************************/
+
+
+/*********************************barrir_destroy function to destroy a barrier*******************/
+
+SYSCALL_DEFINE1(barrier_destroy, unsigned int, barrier_id)
+{
+  struct list_head *loop;  
+  struct barrier *barrier;
+
+  mutex_lock(&init_dest_lock);
+
+  //finding the appropriate barrier structure to destroy
+  list_for_each(loop,&barrier_list)
+  {
+    barrier = list_to_barrier(loop);
+    if ((barrier->barrier_id == barrier_id) && (barrier->tgid == current->tgid))
+      break;
+  }
+
+  //invalid barried id entered
+  if(loop == &barrier_list)
+  {
+    printk("invalid barrier to destroy\n");
+    mutex_unlock(&init_dest_lock);
+    return -EINVAL;
+  }
+
+  //return an error if the barrier is busy synchronising
+  if(waitqueue_active(&barrier->my_queue))
+  {
+    printk("cannot destroy!!! barrier is busy synchronising\n");
+    mutex_unlock(&init_dest_lock);
+    return -EBUSY;
+  }
+
+  list_del(loop);
+  kfree(barrier);
+
+  mutex_unlock(&init_dest_lock);
+
+  return 0;
+
+}
+
+/***************************************************************************************************/
\ No newline at end of file
diff -rNu kernel/barrier/Makefile kernel_old/barrier/Makefile
--- kernel/barrier/Makefile	1969-12-31 17:00:00.000000000 -0700
+++ kernel_old/barrier/Makefile	2017-11-28 16:54:40.994282999 -0700
@@ -0,0 +1,3 @@
+obj-y:=barrier_sys.o
+
+
diff -rNu kernel/fs/hello_world_sys.c kernel_old/fs/hello_world_sys.c
--- kernel/fs/hello_world_sys.c	1969-12-31 17:00:00.000000000 -0700
+++ kernel_old/fs/hello_world_sys.c	2017-11-24 11:51:59.534013999 -0700
@@ -0,0 +1,11 @@
+#include <linux/kernel.h>
+#include <linux/unistd.h>
+#include <linux/linkage.h>
+#include <linux/syscalls.h>
+
+SYSCALL_DEFINE0(hello_world_sys)
+{
+	printk("hello world\n");
+	printk("syscall initialised successfully:)");
+	return 0;
+}
diff -rNu kernel/include/linux/syscalls.h kernel_old/include/linux/syscalls.h
--- kernel/include/linux/syscalls.h	2017-06-17 10:44:57.000000000 -0700
+++ kernel_old/include/linux/syscalls.h	2017-11-28 20:51:10.273376999 -0700
@@ -883,3 +883,7 @@
 			const char __user *const __user *envp, int flags);
 
 #endif
+
+asmlinkage long barrier_init(unsigned int count, signed int timeout);
+asmlinkage long barrier_wait(unsigned int barrier_id);
+asmlinkage long barrier_destroy(unsigned int barrier_id);
diff -rNu kernel/include/uapi/asm-generic/unistd.h kernel_old/include/uapi/asm-generic/unistd.h
--- kernel/include/uapi/asm-generic/unistd.h	2017-06-17 10:44:58.000000000 -0700
+++ kernel_old/include/uapi/asm-generic/unistd.h	2017-11-28 16:19:28.152041000 -0700
@@ -710,8 +710,15 @@
 #define __NR_execveat 281
 __SC_COMP(__NR_execveat, sys_execveat, compat_sys_execveat)
 
+#define __NR_barrier_init 282
+__SYSCALL(__NR_barrier_init, sys_barrier_init)
+#define __NR_barrier_wait 283
+__SYSCALL(__NR_barrier_wait, sys_barrier_wait)
+#define __NR_barrier_destroy 284
+__SYSCALL(__NR_barrier_destroy, sys_barrier_destroy)
+
 #undef __NR_syscalls
-#define __NR_syscalls 282
+#define __NR_syscalls 285
 
 /*
  * All syscalls below here should go away really,
diff -rNu kernel/kernel/sys_ni.c kernel_old/kernel/sys_ni.c
--- kernel/kernel/sys_ni.c	2017-06-17 10:44:58.000000000 -0700
+++ kernel_old/kernel/sys_ni.c	2017-11-28 16:20:29.960041000 -0700
@@ -229,3 +229,8 @@
 
 /* execveat */
 cond_syscall(sys_execveat);
+
+/*barriers*/
+cond_syscall(sys_barrier_init);
+cond_syscall(sys_barrier_wait);
+cond_syscall(sys_barrier_destroy);
diff -rNu kernel/Makefile kernel_old/Makefile
--- kernel/Makefile	2017-06-17 10:44:24.000000000 -0700
+++ kernel_old/Makefile	2017-11-28 18:58:49.612730999 -0700
@@ -879,7 +879,7 @@
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ barrier/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
